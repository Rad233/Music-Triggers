//file:noinspection GroovyUnusedAssignment
//file:noinspection GroovyAssignabilityCheck

plugins {
    id 'net.minecraftforge.gradle' version '5.1+'
    id 'com.github.johnrengelman.shadow' version '7.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = '1.19.2-6.0'
group = 'mods.thecomputerizer.musictriggers'
archivesBaseName = 'musictriggers'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2022.11.27-1.19.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        def mixinStuff = [
                '-Dmixin.debug.export=true',
                '-Dmixin.hotSwap=true',
                '-Dmixin.checks.interfaces=true',
                '-mixin.config="musictriggers.mixin.json"'
        ]
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args mixinStuff
            mods {
                musictriggers {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args mixinStuff
            mods {
                musictriggers {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                musictriggers {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = 'Modrinth'
        url = 'https://api.modrinth.com/maven'
        content {
            includeGroup 'maven.modrinth'
        }
    }
    maven {
        url = uri("https://m2.dv8tion.net/releases")
    }
    maven {
        url = uri("https://jitpack.io")
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
    implementation.extendsFrom(shade)
    shadow.extendsFrom shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.2'

    //external dependencies
    shade('io.github.kostaskougios:cloning:1.10.3')
    shade('com.github.walkyst:lavaplayer-fork:1.3.97.1') {
        exclude module: 'commons-lang3'
        exclude module: 'httpcore'
        exclude module: 'httpclient'
    }

    //libraries that need to be included separately for relocation
    shade('org.apache.httpcomponents:httpcore:4.4.15')
    shade('org.apache.httpcomponents:httpclient:4.5.14')
    shade('org.apache.commons:commons-lang3:3.12.0')

    //required mod dependencies
    implementation fg.deobf('maven.modrinth:the-impossible-library:1.19.2-0.2.2')

    //mixin
    annotationProcessor('org.spongepowered:mixin:0.8.5:processor')

    //mods
    implementation fg.deobf('curse.maven:serene-seasons-291874:4037228')
    implementation fg.deobf('curse.maven:atomicstrykers-infernal-mobs-227875:4141773')
    implementation fg.deobf('curse.maven:game-stages-268655:3943057')

    runtimeOnly(fg.deobf("curse.maven:bookshelf-228525:4153136"))
}

shadowJar {
    //necessary relocation
    relocate 'org.slf4j', 'libraries.sljf4'
    relocate 'org.apache.commons', 'libraries.apache.commons'
    relocate 'org.apache.http', 'libraries.apache.http'
    configurations = [project.configurations.shadow]
    classifier ''
    mergeServiceFiles()
}


reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

mixin {
    add sourceSets.main, "musictriggers.refmap.json"
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    from (sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version
    }
}

jar {
    manifest {
        attributes([
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "musictriggers.mixin.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.assemble.dependsOn shadowJar
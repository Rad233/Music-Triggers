//file:noinspection GroovyAssignabilityCheck
//file:noinspection GrDeprecatedAPIUsage
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'gradle.plugin.com.github.johnrengelman', name: 'shadow', version: '7.1.2'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'maven-publish'

version = '1.19.2-6.0_PUBLIC_BETA'
group = 'mods.thecomputerizer.musictriggers'
archivesBaseName = 'musictriggers'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.19.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = uri("https://m2.dv8tion.net/releases")
    }
    maven {
        url = uri("https://jitpack.io")
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    shade
    implementation.extendsFrom(shade)
    shadow.extendsFrom shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.2'

    //external dependencies
    shade("io.github.kostaskougios:cloning:1.10.3")
    implementation("com.moandjiezana.toml:toml4j:0.7.2") { exclude group: 'com.google.code.gson', module: 'gson' }
    shade("com.github.walkyst:lavaplayer-fork:1.3.97.1")
    shade("org.apache.commons:commons-lang3:3.12.0") //this has to be shaded and relocated separately

    // required mod dependencies
    implementation fg.deobf("curse.maven:the-impossible-library-661115:4300749")

    //mods
    implementation fg.deobf("curse.maven:serene-seasons-291874:4037228")
    implementation fg.deobf("curse.maven:atomicstrykers-infernal-mobs-227875:4141773")
    implementation fg.deobf("curse.maven:game-stages-268655:3943057")
    implementation fg.deobf("curse.maven:bookshelf-228525:4153136")
}

shadowJar {
    //necessary relocation
    relocate 'org.slf4j', 'mods.thecomputerizer.musictriggers.libraries.sljf4'
    relocate 'org.apache.commons', 'mods.thecomputerizer.musictriggers.libraries.apache.commons'
    relocate 'org.apache.http', 'mods.thecomputerizer.musictriggers.libraries.apache.http'
    configurations = [project.configurations.shadow]
    classifier ''
}


reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.output
    }
}

mixin {
    add sourceSets.main, "musictriggers.refmap.json"
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "musictriggers",
                "Specification-Vendor"    : "The_Computerizer",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "The_Computerizer",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "musictriggers.mixin.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
tasks.assemble.dependsOn shadowJar
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
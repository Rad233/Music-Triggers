//file:noinspection GroovyUnusedAssignment
//file:noinspection GroovyAssignabilityCheck
buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.16.5-4.1'
group = 'mods.thecomputerizer.musictriggers' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'musictriggers'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                musictriggers {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                musictriggers {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'musictriggers', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                musictriggers {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    maven {
        url = 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
}
// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.22'

    implementation fg.deobf("curse.maven:game-stages-268655:3480161")
    implementation fg.deobf("curse.maven:bookshelf-228525:3474499")
    implementation fg.deobf("curse.maven:enhanced-celestials-438447:3532022")
    implementation fg.deobf("curse.maven:configured-457570:3546348")
    implementation fg.deobf("curse.maven:atomicstrykers-infernal-mobs-227875:3048405")
    implementation fg.deobf("curse.maven:dynamic-surroundings-238891:3502320")
    implementation fg.deobf("curse.maven:better-weather-400714:3420517")
    implementation fg.deobf("curse.maven:serene-seasons-291874:3510900")

    implementation fg.deobf("curse.maven:jei-238222:3488178")
}

jar {
    manifest {
        attributes([
            "Specification-Title": "musictriggers",
            "Specification-Vendor": "musictriggerssareus",
            "Specification-Version": "4.1",
            "Implementation-Title": project.name,
            "Implementation-Version": "4.1",
            "Implementation-Vendor" :"musictriggers",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
